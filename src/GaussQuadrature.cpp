///////////////////////////////////////////////////////////////////////////////
///
///	\file    GaussQuadrature.cpp
///	\author  Paul Ullrich
///	\version January 1, 2015
///
///	<remarks>
///		Copyright 2000-2010 Paul Ullrich
///
///		This file is distributed as part of the Tempest source code package.
///		Permission is granted to use, copy, modify and distribute this
///		source code and its documentation under the terms of the GNU General
///		Public License.  This software is provided "as is" without express
///		or implied warranty.
///	</remarks>

#include "GaussQuadrature.h"
#include "LegendrePolynomial.h"
#include "Exception.h"

///////////////////////////////////////////////////////////////////////////////

void GaussQuadrature::GetPoints(
	int nCount,
	DataArray1D<double> & dG,
	DataArray1D<double> & dW
) {
	// Check for valid range
	if (nCount < 1) {
		_EXCEPTION1("Invalid count (%i): Minimum count 1", nCount);
	}

	// Initialize the arrays
	dG.Allocate(nCount);
	dW.Allocate(nCount);

	// Degree 1
	if (nCount == 1) {
		dG[0] =  0.0;
		dW[0] = +2.0;

	// Degree 2
	} else if (nCount == 2) {
		dG[0] = -0.5773502691896257;
		dG[1] = +0.5773502691896257;

		dW[0] = +1.0;
		dW[1] = +1.0;

	// Degree 3
	} else if (nCount == 3) {
		dG[0] = -0.7745966692414834;
		dG[1] =  0.0;
		dG[2] = +0.7745966692414834;

		dW[0] = +0.5555555555555556;
		dW[1] = +0.8888888888888888;
		dW[2] = +0.5555555555555556;

	// Degree 4
	} else if (nCount == 4) {
		dG[0] = -0.8611363115940526;
		dG[1] = -0.3399810435848563;
		dG[2] = +0.3399810435848563;
		dG[3] = +0.8611363115940526;

		dW[0] = 0.3478548451374538;
		dW[1] = 0.6521451548625461;
		dW[2] = 0.6521451548625461;
		dW[3] = 0.3478548451374538;

	// Degree 5
	} else if (nCount == 5) {
		dG[0] = -0.9061798459386640;
		dG[1] = -0.5384693101056831;
		dG[2] =  0.0;
		dG[3] = +0.5384693101056831;
		dG[4] = +0.9061798459386640;

		dW[0] = 0.2369268850561891;
		dW[1] = 0.4786286704993665;
		dW[2] = 0.5688888888888889;
		dW[3] = 0.4786286704993665;
		dW[4] = 0.2369268850561891;

	// Degree 6
	} else if (nCount == 6) {
		dG[0] = -0.9324695142031521;
		dG[1] = -0.6612093864662645;
		dG[2] = -0.2386191860831969;
		dG[3] = +0.2386191860831969;
		dG[4] = +0.6612093864662645;
		dG[5] = +0.9324695142031521;

		dW[0] = 0.1713244923791704;
		dW[1] = 0.3607615730481386;
		dW[2] = 0.4679139345726910;
		dW[3] = 0.4679139345726910;
		dW[4] = 0.3607615730481386;
		dW[5] = 0.1713244923791704;

	// Degree 7
	} else if (nCount == 7) {
		dG[0] = -0.9491079123427585;
		dG[1] = -0.7415311855993945;
		dG[2] = -0.4058451513773972;
		dG[3] =  0.0;
		dG[4] = +0.4058451513773972;
		dG[5] = +0.7415311855993945;
		dG[6] = +0.9491079123427585;

		dW[0] = 0.1294849661688697;
		dW[1] = 0.2797053914892766;
		dW[2] = 0.3818300505051189;
		dW[3] = 0.4179591836734694;
		dW[4] = 0.3818300505051189;
		dW[5] = 0.2797053914892766;
		dW[6] = 0.1294849661688697;

	// Degree 8
	} else if (nCount == 8) {
		dG[0] = -0.9602898564975363;
		dG[1] = -0.7966664774136267;
		dG[2] = -0.5255324099163290;
		dG[3] = -0.1834346424956498;
		dG[4] = +0.1834346424956498;
		dG[5] = +0.5255324099163290;
		dG[6] = +0.7966664774136267;
		dG[7] = +0.9602898564975363;

		dW[0] = 0.1012285362903763;
		dW[1] = 0.2223810344533745;
		dW[2] = 0.3137066458778873;
		dW[3] = 0.3626837833783620;
		dW[4] = 0.3626837833783620;
		dW[5] = 0.3137066458778873;
		dW[6] = 0.2223810344533745;
		dW[7] = 0.1012285362903763;

	// Degree 9
	} else if (nCount == 9) {
		dG[0] = -1.0;
		dG[1] = -0.899757995411460;
		dG[2] = -0.677186279510738;
		dG[3] = -0.363117463826178;
		dG[4] =  0.0;
		dG[5] = +0.363117463826178;
		dG[6] = +0.677186279510738;
		dG[7] = +0.899757995411460;
		dG[8] = +1.0;

		dW[0] = 0.0812743883615744;
		dW[1] = 0.1806481606948574;
		dW[2] = 0.2606106964029354;
		dW[3] = 0.3123470770400029;
		dW[4] = 0.3302393550012598;
		dW[5] = 0.3123470770400029;
		dW[6] = 0.2606106964029354;
		dW[7] = 0.1806481606948574;
		dW[8] = 0.0812743883615744;

	// Degree 10
	} else if (nCount == 10) {
		dG[0] = -0.9739065285171717;
		dG[1] = -0.8650633666889845;
		dG[2] = -0.6794095682990244;
		dG[3] = -0.4333953941292472;
		dG[4] = -0.1488743389816312;
		dG[5] = +0.1488743389816312;
		dG[6] = +0.4333953941292472;
		dG[7] = +0.6794095682990244;
		dG[8] = +0.8650633666889845;
		dG[9] = +0.9739065285171717;

		dW[0] = 0.0666713443086881;
		dW[1] = 0.1494513491505806;
		dW[2] = 0.2190863625159820;
		dW[3] = 0.2692667193099963;
		dW[4] = 0.2955242247147529;
		dW[5] = 0.2955242247147529;
		dW[6] = 0.2692667193099963;
		dW[7] = 0.2190863625159820;
		dW[8] = 0.1494513491505806;
		dW[9] = 0.0666713443086881;

	// Higher degrees
	} else {
		LegendrePolynomial::AllRoots(nCount, dG);

		for (int k = 0; k < nCount; k++) {
			double dDeriv =
				LegendrePolynomial::EvaluateDerivative(nCount, dG[k]);

			dW[k] = 2.0 / ((1.0 - dG[k] * dG[k]) * dDeriv * dDeriv);
		}

	}
}

///////////////////////////////////////////////////////////////////////////////

void GaussQuadrature::GetPoints(
	int nCount,
	double dXi0,
	double dXi1,
	DataArray1D<double> & dG,
	DataArray1D<double> & dW
) {
	// Get quadrature points in the [-1, 1] reference element
	GetPoints(nCount, dG, dW);

	// Scale quadrature points
	for (int i = 0; i < nCount; i++) {
		dG[i] = dXi0 + 0.5 * (dXi1 - dXi0) * (dG[i] + 1.0);
		dW[i] = 0.5 * (dXi1 - dXi0) * dW[i];
	}
}

///////////////////////////////////////////////////////////////////////////////

void GaussQuadrature::GetPoints(
	int nCount,
	DataArray2D<double> & dG,
	DataArray1D<double> & dW
) {
	if(nCount <= 4){
		
		dW[0] = 0.0549758718276609338191631624501052;
        dW[1] = 0.0549758718276609338191631624501052;
        dW[2] = 0.0549758718276609338191631624501052;
        dW[3] = 0.111690794839005732847503504216561;
        dW[4] = 0.111690794839005732847503504216561;
        dW[5] = 0.111690794839005732847503504216561;
	
		dG[0][0] = 0.8168475729804585130808570731956, dG[0][1] = 0.0915762135097707434595714634022015;
        dG[1][0] = 0.0915762135097707434595714634022015, dG[1][1] = 0.8168475729804585130808570731956;
        dG[2][0] = 0.0915762135097707434595714634022015, dG[2][1] = 0.0915762135097707434595714634022015;
        dG[3][0] = 0.1081030181680702273633414922339, dG[3][1] = 0.445948490915964886318329253883051;
        dG[4][0] = 0.445948490915964886318329253883051, dG[4][1] = 0.1081030181680702273633414922339;
        dG[5][0] = 0.445948490915964886318329253883051, dG[5][1] = 0.445948490915964886318329253883051;
	}
	else if(nCount <= 8){
		dW[0] = 0.072157803838893584125545555249701;
        dW[1] = 0.051608685267359125140895775145648;
		dW[2] = 0.051608685267359125140895775145648;
		dW[3] = 0.051608685267359125140895775145648;
		dW[4] = 0.016229248811599040155462964170437;
		dW[5] = 0.016229248811599040155462964170437;
		dW[6] = 0.016229248811599040155462964170437;
		dW[7] = 0.047545817133642312396948052190887;
		dW[8] = 0.047545817133642312396948052190887;
		dW[9] = 0.047545817133642312396948052190887;
		dW[10] = 0.013615157087217497132422345038231;
		dW[11] = 0.013615157087217497132422345038231;
		dW[12] = 0.013615157087217497132422345038231;
		dW[13] = 0.013615157087217497132422345038231;
		dW[14] = 0.013615157087217497132422345038231;
		dW[15] = 0.01361515708721749713242234503823;
		
		dG[0][0] = 0.33333333333333333333333333333333, dG[0][1] = 0.33333333333333333333333333333333;
		dG[1][0] = 0.1705693077517602066222935014994, dG[1][1] = 0.1705693077517602066222935014994;
		dG[2][0] = 0.1705693077517602066222935014994, dG[2][1] = 0.65886138449647958675541299700121;
		dG[3][0] = 0.65886138449647958675541299700121, dG[3][1] = 0.1705693077517602066222935014994;
		dG[4][0] = 0.050547228317030975458423550596387, dG[4][1] = 0.050547228317030975458423550596387;
		dG[5][0] = 0.050547228317030975458423550596387, dG[5][1] = 0.89890554336593804908315289880723;
		dG[6][0] = 0.89890554336593804908315289880723, dG[6][1] = 0.050547228317030975458423550596387;
		dG[7][0] = 0.45929258829272315602881551450124, dG[7][1] = 0.45929258829272315602881551450124;
		dG[8][0] = 0.45929258829272315602881551450124, dG[8][1] = 0.081414823414553687942368970997513;
		dG[9][0] = 0.081414823414553687942368970997513, dG[9][1] = 0.45929258829272315602881551450124;
		dG[10][0] = 0.72849239295540428124100037918962, dG[10][1] = 0.26311282963463811342178578626121;
		dG[11][0] = 0.26311282963463811342178578626121, dG[11][1] = 0.72849239295540428124100037918962;
		dG[12][0] = 0.72849239295540428124100037918962, dG[12][1] = 0.0083947774099576053372138345491687;
		dG[13][0] = 0.0083947774099576053372138345491687, dG[13][1] = 0.72849239295540428124100037918962;
		dG[14][0] = 0.26311282963463811342178578626121, dG[14][1] = 0.0083947774099576053372138345491687;
		dG[15][0] = 0.0083947774099576053372138345491687, dG[15][1] = 0.26311282963463811342178578626121;
		
	}	
	
}

