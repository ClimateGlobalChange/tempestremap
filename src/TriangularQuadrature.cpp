///////////////////////////////////////////////////////////////////////////////
///
///	\file    TriangularQuadrature.cpp
///	\author  Paul Ullrich
///	\version September 1, 2014
///
///	<remarks>
///		Copyright 2000-2014 Paul Ullrich
///
///		This file is distributed as part of the Tempest source code package.
///		Permission is granted to use, copy, modify and distribute this
///		source code and its documentation under the terms of the GNU General
///		Public License.  This software is provided "as is" without express
///		or implied warranty.
///	</remarks>

#include "TriangularQuadrature.h"
#include "GaussQuadrature.h"

#include <cstring>

///////////////////////////////////////////////////////////////////////////////

TriangularQuadratureRule::TriangularQuadratureRule(
	int nOrder
) {
/*
	DataArray1D<double> dG;
	DataArray1D<double> dW;
	GaussQuadrature::GetPoints(nOrder, 0.0, 1.0, dG, dW);

	m_nPoints = nOrder * nOrder;
	m_dG.Allocate(nOrder * nOrder, 3);
	m_dW.Allocate(nOrder * nOrder);

	for (int i = 0; i < nOrder; i++) {
	for (int j = 0; j < nOrder; j++) {
		m_dG[i * nOrder + j][0] = dG[i] * (1.0 - dG[j]);
		m_dG[i * nOrder + j][1] = dG[j];
		m_dG[i * nOrder + j][2] = (1.0 - dG[i]) * (1.0 - dG[j]);

		m_dW[i * nOrder + j] = 2.0 * dW[i] * dW[j] * (1.0 - dG[j]);
	}
	}
*/
	// 12th order quadrature rule (33 points)
	if (nOrder == 12) {
		const double TriQuadratureG[33][3] = {
			{0.023565220452390, 0.488217389773805, 0.488217389773805},
			{0.488217389773805, 0.023565220452390, 0.488217389773805},
			{0.488217389773805, 0.488217389773805, 0.023565220452390},

			{0.120551215411079, 0.439724392294460, 0.439724392294460},
			{0.439724392294460, 0.120551215411079, 0.439724392294460},
			{0.439724392294460, 0.439724392294460, 0.120551215411079},

			{0.457579229975768, 0.271210385012116, 0.271210385012116},
			{0.271210385012116, 0.457579229975768, 0.271210385012116},
			{0.271210385012116, 0.271210385012116, 0.457579229975768},

			{0.744847708916828, 0.127576145541586, 0.127576145541586},
			{0.127576145541586, 0.744847708916828, 0.127576145541586},
			{0.127576145541586, 0.127576145541586, 0.744847708916828},

			{0.957365299093576, 0.021317350453210, 0.021317350453210},
			{0.021317350453210, 0.957365299093576, 0.021317350453210},
			{0.021317350453210, 0.021317350453210, 0.957365299093576},

			{0.115343494534698, 0.275713269685514, 0.608943235779788},
			{0.115343494534698, 0.608943235779788, 0.275713269685514},
			{0.275713269685514, 0.115343494534698, 0.608943235779788},
			{0.275713269685514, 0.608943235779788, 0.115343494534698},
			{0.608943235779788, 0.115343494534698, 0.275713269685514},
			{0.608943235779788, 0.275713269685514, 0.115343494534698},

			{0.022838332222257, 0.281325580989940, 0.695836086787803},
			{0.022838332222257, 0.695836086787803, 0.281325580989940},
			{0.281325580989940, 0.022838332222257, 0.695836086787803},
			{0.281325580989940, 0.695836086787803, 0.022838332222257},
			{0.695836086787803, 0.022838332222257, 0.281325580989940},
			{0.695836086787803, 0.281325580989940, 0.022838332222257},

			{0.025734050548330, 0.116251915907597, 0.858014033544073},
			{0.025734050548330, 0.858014033544073, 0.116251915907597},
			{0.116251915907597, 0.025734050548330, 0.858014033544073},
			{0.116251915907597, 0.858014033544073, 0.025734050548330},
			{0.858014033544073, 0.025734050548330, 0.116251915907597},
			{0.858014033544073, 0.116251915907597, 0.025734050548330}};

		const double TriQuadratureW[33] =
			{0.025731066440455, 0.025731066440455, 0.025731066440455,
			 0.043692544538038, 0.043692544538038, 0.043692544538038,
			 0.062858224217885, 0.062858224217885, 0.062858224217885,
			 0.034796112930709, 0.034796112930709, 0.034796112930709,
			 0.006166261051559, 0.006166261051559, 0.006166261051559,
			 0.040371557766381, 0.040371557766381, 0.040371557766381,
			 0.040371557766381, 0.040371557766381, 0.040371557766381,
			 0.022356773202303, 0.022356773202303, 0.022356773202303,
			 0.022356773202303, 0.022356773202303, 0.022356773202303,
			 0.017316231108659, 0.017316231108659, 0.017316231108659,
			 0.017316231108659, 0.017316231108659, 0.017316231108659};

		m_nPoints = 33;

		m_dG.Allocate(33, 3);
		memcpy(&(m_dG[0][0]), &(TriQuadratureG[0][0]), 33 * 3 * sizeof(double));

		m_dW.Allocate(33);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 33 * sizeof(double));

	// 10th order quadrature rule (25 points)
	} else if (nOrder == 10) {
		const double TriQuadratureG[25][3] = {
			{0.333333333333333, 0.333333333333333, 0.333333333333333},
			{0.028844733232685, 0.485577633383657, 0.485577633383657},
			{0.485577633383657, 0.028844733232685, 0.485577633383657},
			{0.485577633383657, 0.485577633383657, 0.028844733232685},
			{0.781036849029926, 0.109481575485037, 0.109481575485037},
			{0.109481575485037, 0.781036849029926, 0.109481575485037},
			{0.109481575485037, 0.109481575485037, 0.781036849029926},
			{0.141707219414880, 0.307939838764121, 0.550352941820999},
			{0.141707219414880, 0.550352941820999, 0.307939838764121},
			{0.307939838764121, 0.141707219414880, 0.550352941820999},
			{0.307939838764121, 0.550352941820999, 0.141707219414880},
			{0.550352941820999, 0.141707219414880, 0.307939838764121},
			{0.550352941820999, 0.307939838764121, 0.141707219414880},
			{0.025003534762686, 0.246672560639903, 0.728323904597411},
			{0.025003534762686, 0.728323904597411, 0.246672560639903},
			{0.246672560639903, 0.025003534762686, 0.728323904597411},
			{0.246672560639903, 0.728323904597411, 0.025003534762686},
			{0.728323904597411, 0.025003534762686, 0.246672560639903},
			{0.728323904597411, 0.246672560639903, 0.025003534762686},
			{0.009540815400299, 0.066803251012200, 0.923655933587500},
			{0.009540815400299, 0.923655933587500, 0.066803251012200},
			{0.066803251012200, 0.009540815400299, 0.923655933587500},
			{0.066803251012200, 0.923655933587500, 0.009540815400299},
			{0.923655933587500, 0.009540815400299, 0.066803251012200},
			{0.923655933587500, 0.066803251012200, 0.009540815400299}};

		const double TriQuadratureW[25] =
			{0.090817990382754,
			 0.036725957756467, 0.036725957756467, 0.036725957756467,
			 0.045321059435528, 0.045321059435528, 0.045321059435528,
			 0.072757916845420, 0.072757916845420, 0.072757916845420,
			 0.072757916845420, 0.072757916845420, 0.072757916845420,
			 0.028327242531057, 0.028327242531057, 0.028327242531057,
			 0.028327242531057, 0.028327242531057, 0.028327242531057,
			 0.009421666963733, 0.009421666963733, 0.009421666963733,
			 0.009421666963733, 0.009421666963733, 0.009421666963733};

		m_nPoints = 25;

		m_dG.Allocate(25, 3);
		memcpy(&(m_dG[0][0]), &(TriQuadratureG[0][0]), 25 * 3 * sizeof(double));

		m_dW.Allocate(25);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 25 * sizeof(double));

	// 8th order quadrature rule (16 points)
	} else if (nOrder == 8) {
		const double TriQuadratureG[16][3] = {
			{0.333333333333333, 0.333333333333333, 0.333333333333333},
			{0.081414823414554, 0.459292588292723, 0.459292588292723},
			{0.459292588292723, 0.081414823414554, 0.459292588292723},
			{0.459292588292723, 0.459292588292723, 0.081414823414554},
			{0.658861384496480, 0.170569307751760, 0.170569307751760},
			{0.170569307751760, 0.658861384496480, 0.170569307751760},
			{0.170569307751760, 0.170569307751760, 0.658861384496480},
			{0.898905543365938, 0.050547228317031, 0.050547228317031},
			{0.050547228317031, 0.898905543365938, 0.050547228317031},
			{0.050547228317031, 0.050547228317031, 0.898905543365938},
			{0.008394777409958, 0.263112829634638, 0.728492392955404},
			{0.008394777409958, 0.728492392955404, 0.263112829634638},
			{0.263112829634638, 0.008394777409958, 0.728492392955404},
			{0.263112829634638, 0.728492392955404, 0.008394777409958},
			{0.728492392955404, 0.263112829634638, 0.008394777409958},
			{0.728492392955404, 0.008394777409958, 0.263112829634638}};

		const double TriQuadratureW[16] =
			{0.144315607677787,
			 0.095091634267285, 0.095091634267285, 0.095091634267285,
			 0.103217370534718, 0.103217370534718, 0.103217370534718,
			 0.032458497623198, 0.032458497623198, 0.032458497623198,
			 0.027230314174435, 0.027230314174435, 0.027230314174435,
			 0.027230314174435, 0.027230314174435, 0.027230314174435};

		m_nPoints = 16;

		m_dG.Allocate(16, 3);
		memcpy(&(m_dG[0][0]), &(TriQuadratureG[0][0]), 16 * 3 * sizeof(double));

		m_dW.Allocate(16);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 16 * sizeof(double));

	// 4th order quadrature rule (6 points)
	} else if (nOrder == 4) {

		const double TriQuadratureG[6][3] = {
			{0.108103018168070, 0.445948490915965, 0.445948490915965},
			{0.445948490915965, 0.108103018168070, 0.445948490915965},
			{0.445948490915965, 0.445948490915965, 0.108103018168070},
			{0.816847572980458, 0.091576213509771, 0.091576213509771},
			{0.091576213509771, 0.816847572980458, 0.091576213509771},
			{0.091576213509771, 0.091576213509771, 0.816847572980458}};

		const double TriQuadratureW[6] =
			{0.223381589678011, 0.223381589678011, 0.223381589678011,
			 0.109951743655322, 0.109951743655322, 0.109951743655322};

		m_nPoints = 6;

		m_dG.Allocate(6, 3);
		memcpy(&(m_dG[0][0]), &(TriQuadratureG[0][0]), 6 * 3 * sizeof(double));

		m_dW.Allocate(6);
		memcpy(&(m_dW[0]), &(TriQuadratureW[0]), 6 * sizeof(double));

	// 1st order quadrature rule (1 point)
	} else if (nOrder == 1) {

		m_dG.Allocate(1, 3);
		m_dG[0][0] = 0.333333333333333;
		m_dG[0][1] = 0.333333333333333;
		m_dG[0][2] = 0.333333333333333;

		m_dW.Allocate(1);
		m_dW[0] = 1.000000000000000;

	// Unsupported order
	} else {
		_EXCEPTIONT("Unsupported order of TriangularQuadratureRule");
	}
}

///////////////////////////////////////////////////////////////////////////////

